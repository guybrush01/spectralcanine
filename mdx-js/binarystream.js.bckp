BinaryParser = function(bigEndian, allowExceptions){
    this.bigEndian = bigEndian, this.allowExceptions = allowExceptions;
};
with({p: BinaryParser.prototype}){
    p.encodeFloat = function(number, precisionBits, exponentBits){
        var bias = Math.pow(2, exponentBits - 1) - 1, minExp = -bias + 1, maxExp = bias, minUnnormExp = minExp - precisionBits,
        status = isNaN(n = parseFloat(number)) || n == -Infinity || n == +Infinity ? n : 0,
        exp = 0, len = 2 * bias + 1 + precisionBits + 3, bin = new Array(len),
        signal = (n = status !== 0 ? 0 : n) < 0, n = Math.abs(n), intPart = Math.floor(n), floatPart = n - intPart,
        i, lastBit, rounded, j, result;
        for(i = len; i; bin[--i] = 0);
        for(i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor(intPart / 2));
        for(i = bias + 1; floatPart > 0 && i; (bin[++i] = ((floatPart *= 2) >= 1) - 0) && --floatPart);
        for(i = -1; ++i < len && !bin[i];);
        if(bin[(lastBit = precisionBits - 1 + (i = (exp = bias + 1 - i) >= minExp && exp <= maxExp ? i + 1 : bias + 1 - (exp = minExp - 1))) + 1]){
            if(!(rounded = bin[lastBit]))
                for(j = lastBit + 2; !rounded && j < len; rounded = bin[j++]);
            for(j = lastBit + 1; rounded && --j >= 0; (bin[j] = !bin[j] - 0) && (rounded = 0));
        }
        for(i = i - 2 < 0 ? -1 : i - 3; ++i < len && !bin[i];);

        (exp = bias + 1 - i) >= minExp && exp <= maxExp ? ++i : exp < minExp &&
            (exp != bias + 1 - len && exp < minUnnormExp && this.warn("encodeFloat::float underflow"), i = bias + 1 - (exp = minExp - 1));
        (intPart || status !== 0) && (this.warn(intPart ? "encodeFloat::float overflow" : "encodeFloat::" + status),
            exp = maxExp + 1, i = bias + 2, status == -Infinity ? signal = 1 : isNaN(status) && (bin[i] = 1));
        for(n = Math.abs(exp + bias), j = exponentBits + 1, result = ""; --j; result = (n % 2) + result, n = n >>= 1);
        for(n = 0, j = 0, i = (result = (signal ? "1" : "0") + result + bin.slice(i, i + precisionBits).join("")).length, r = [];
            i; n += (1 << j) * result.charAt(--i), j == 7 && (r[r.length] = String.fromCharCode(n), n = 0), j = (j + 1) % 8);
        r[r.length] = n ? String.fromCharCode(n) : "";
        return (this.bigEndian ? r.reverse() : r).join("");
    };
    p.encodeInt = function(number, bits, signed){
        var max = Math.pow(2, bits), r = [];
        (number >= max || number < -(max >> 1)) && this.warn("encodeInt::overflow") && (number = 0);
        number < 0 && (number += max);
        for(; number; r[r.length] = String.fromCharCode(number % 256), number = Math.floor(number / 256));
        for(bits = -(-bits >> 3) - r.length; bits--; r[r.length] = "\0");
        return (this.bigEndian ? r.reverse() : r).join("");
    };
    p.decodeFloat = function(data, precisionBits, exponentBits){
        var b = ((b = new this.Buffer(this.bigEndian, data)).checkBuffer(precisionBits + exponentBits + 1), b),
            bias = Math.pow(2, exponentBits - 1) - 1, signal = b.readBits(precisionBits + exponentBits, 1),
            exponent = b.readBits(precisionBits, exponentBits), significand = 0,
            divisor = 2, curByte = b.buffer.length + (-precisionBits >> 3) - 1,
            byteValue, startBit, mask;
        do
            for(byteValue = b.buffer[ ++curByte ], startBit = precisionBits % 8 || 8, mask = 1 << startBit;
                mask >>= 1; (byteValue & mask) && (significand += 1 / divisor), divisor *= 2);
        while(precisionBits -= startBit);
        return exponent == (bias << 1) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity
            : (1 + signal * -2) * (exponent || significand ? !exponent ? Math.pow(2, -bias + 1) * significand
            : Math.pow(2, exponent - bias) * (1 + significand) : 0);
    };
    p.decodeInt = function(data, bits, signed){
        var b = new this.Buffer(this.bigEndian, data), x = b.readBits(0, bits), max = Math.pow(2, bits);
        return signed && x >= max / 2 ? x - max : x;
    };
    with({p: (p.Buffer = function(bigEndian, buffer){
        this.bigEndian = bigEndian || 0, this.buffer = [], this.setBuffer(buffer);
    }).prototype}){
        p.readBits = function(start, length){
            //shl fix: Henri Torgemane ~1996 (compressed by Jonas Raoni)
            function shl(a, b){
                for(++b; --b; a = ((a %= 0x7fffffff + 1) & 0x40000000) == 0x40000000 ? a * 2 : (a - 0x40000000) * 2 + 0x7fffffff + 1);
                return a;
            }
            if(start < 0 || length <= 0)
                return 0;
            this.checkBuffer(start + length);
            for(var offsetLeft, offsetRight = start % 8, curByte = this.buffer.length - (start >> 3) - 1,
                lastByte = this.buffer.length + (-(start + length) >> 3), diff = curByte - lastByte,
                sum = ((this.buffer[ curByte ] >> offsetRight) & ((1 << (diff ? 8 - offsetRight : length)) - 1))
                + (diff && (offsetLeft = (start + length) % 8) ? (this.buffer[ lastByte++ ] & ((1 << offsetLeft) - 1))
                << (diff-- << 3) - offsetRight : 0); diff; sum += shl(this.buffer[ lastByte++ ], (diff-- << 3) - offsetRight)
            );
            return sum;
        };
        p.setBuffer = function(data){
            if(data){
                for(var l, i = l = data.length, b = this.buffer = new Array(l); i; b[l - i] = data.charCodeAt(--i));
                this.bigEndian && b.reverse();
            }
        };
        p.hasNeededBits = function(neededBits){
            return this.buffer.length >= -(-neededBits >> 3);
        };
        p.checkBuffer = function(neededBits){
            if(!this.hasNeededBits(neededBits))
                throw new Error("checkBuffer::missing bytes");
        };
    }
    p.warn = function(msg){
        if(this.allowExceptions)
            throw new Error(msg);
        return 1;
    };
    p.toSmall = function(data){return this.decodeInt(data, 8, true);};
    p.fromSmall = function(number){return this.encodeInt(number, 8, true);};
    p.toByte = function(data){return this.decodeInt(data, 8, false);};
    p.fromByte = function(number){return this.encodeInt(number, 8, false);};
    p.toShort = function(data){return this.decodeInt(data, 16, true);};
    p.fromShort = function(number){return this.encodeInt(number, 16, true);};
    p.toWord = function(data){return this.decodeInt(data, 16, false);};
    p.fromWord = function(number){return this.encodeInt(number, 16, false);};
    p.toInt = function(data){return this.decodeInt(data, 32, true);};
    p.fromInt = function(number){return this.encodeInt(number, 32, true);};
    p.toDWord = function(data){return this.decodeInt(data, 32, false);};
    p.fromDWord = function(number){return this.encodeInt(number, 32, false);};
    p.toFloat = function(data){return this.decodeFloat(data, 23, 8);};
    p.fromFloat = function(number){return this.encodeFloat(number, 23, 8);};
    p.toDouble = function(data){return this.decodeFloat(data, 52, 11);};
    p.fromDouble = function(number){return this.encodeFloat(number, 52, 11);};
}

var haveDataView = (typeof window.DataView === 'undefined') ? false : true;

/// class BinaryStream
/// Desc Imitates a binary data stream
function BinaryStream (file) {
	this.data = get(file, true);

	if (haveDataView) {
		this.buffer = new ArrayBuffer(this.data.length);
		
		this.dataview = new DataView(this.buffer);
		
		for (var i = 0; i < this.buffer.byteLength; i++) {
			this.dataview.setUint8(i, this.data.charCodeAt(i));
		}
	} else {
		for (var i = 0; i < this.data.length; i++) {
			this.data[i] = this.data.charCodeAt(i) & 0xff;
		}
	
		this.parser = new BinaryParser();
		
		this.sub = function (start, length) {
			return this.data.substring(start, start + length);
		};
	}

	this.index = 0;
}

BinaryStream.prototype = {
	/// method BinaryStream#size
	/// Desc Returns the size of the stream
	size : function () {
		if (haveDataView) {
			return this.buffer.byteLength;
		} else {
			return this.data.length;
		}
	},
	
	/// method BinaryStream#sizeRemaining
	/// Desc Returns the size remaining to be read from the internal index
	sizeRemaining : function () {
		if (haveDataView) {
			return this.buffer.byteLength - this.index;
		} else {
			return this.data.length - this.index;
		}
	},
	
	/// method BinaryStream#skip
	/// Desc Skips size bytes
	/// Note Can be negative
	skip : function (size) {
		this.index += size;
		
		if (this.index > this.size()) {
			this.index = this.size() - 1;
			console.log("Exception: clamping illegal internal index");
		} else if (this.index < 0) {
			this.index = 0;
			console.log("Exception: clamping illegal internal index");
		}
		
		return this.index;
	},
	
	/// method BinaryStream#read
	/// Desc Reads size bytes and returns them as a string
	read : function (size) {
		if (this.sizeRemaining() >= size) {
			var data = Array(size);
			
			for (var i = 0; i < size; i++) {
				if (haveDataView) {
					data[i] = String.fromCharCode(String(this.dataview.getUint8(this.index + i)));
				} else {
					data[i] = String.fromCharCode(this.parser.decodeInt(this.sub(this.index + i, 1), 8, false));
				}
			}
			
			this.index += size;
			
			return data.join("");
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readInt8
	/// Desc Reads a signed 8 bits integer and returns it as a number
	readInt8 : function () {
		if (this.sizeRemaining() > 0) {
			if (haveDataView) {
				var data = this.dataview.getInt8(this.index);
			} else {
				var data = this.parser.decodeInt(this.sub(this.index, 1), 8, true);
			}
			this.index += 1;
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readInt8Array
	/// Desc Reads size times signed 8 bits integers and returns them as an array
	readInt8Array : function (size) {
		if (this.sizeRemaining() >= size) {
			var data = [];
			
			for (var i = 0; i < size; i++) {
				if (haveDataView) {
					data[i] = this.dataview.getInt8(this.index);
				} else {
					data[i] = this.parser.decodeInt(this.sub(this.index, 1), 8, true);
				}
				this.index += 1;
			}
			
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readInt16
	/// Desc Reads a signed 16 bits integer and returns it as a number
	readInt16 : function () {
		if (this.sizeRemaining() >= 2) {
			if (haveDataView) {
				var data = this.dataview.getInt16(this.index, true);
			} else {
				var data = this.parser.decodeInt(this.sub(this.index, 2), 16, true);
			}
			this.index += 2;
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readInt16Array
	/// Desc Reads size times signed 16 bits integers and returns them as an array
	readInt16Array : function (size) {
		if (this.sizeRemaining() >= (size * 2)) {
			var data = [];
			
			for (var i = 0; i < size; i++) {
				if (haveDataView) {
					data[i] = this.dataview.getInt16(this.index + (i * 2), true);
				} else {
					data[i] = this.parser.decodeInt(this.sub(this.index + (i * 2), 2), 16, true);
				}
			}
			
			this.index += size * 2;
			
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readInt32
	/// Desc Reads a signed 32 bits integer and returns it as a number
	readInt32 : function () {
		if (this.sizeRemaining() >= 4) {
			if (haveDataView) {
				var data = this.dataview.getInt32(this.index, true);
			} else {
				var data = this.parser.decodeInt(this.sub(this.index, 4), 32, true);
			}
			this.index += 4;
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readInt32Array
	/// Desc Reads size times signed 32 bits integers and returns them as an array
	readInt32Array : function (size) {
		if (this.sizeRemaining() >= (size * 4)) {
			var data = [];
			
			for (var i = 0; i < size; i++) {
				if (haveDataView) {
					data[i] = this.dataview.getInt32(this.index + (i * 4), true);
				} else {
					data[i] = this.parser.decodeInt(this.sub(this.index + (i * 4), 4), 32, true);
				}
			}
			
			this.index += size * 4;
			
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readUint8
	/// Desc Reads an unsigned signed 8 bits integer and returns it as a number
	readUint8 : function () {
		if (this.sizeRemaining() > 0) {
			if (haveDataView) {
				var data = this.dataview.getUint8(this.index);
			} else {
				var data = this.parser.decodeInt(this.sub(this.index, 1), 8, false);
			}
			this.index += 1;
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readUint8Array
	/// Desc Reads size times unsigned 8 bits integers and returns them as an array
	readUint8Array : function (size) {
		if (this.sizeRemaining() >= size) {
			var data = [];
			
			for (var i = 0; i < size; i++) {
				if (haveDataView) {
					data[i] = this.dataview.getUint8(this.index + i);
				} else {
					data[i] = this.parser.decodeInt(this.sub(this.index + i, 1), 8, false);
				}
			}
			
			this.index += size;
			
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readUint16
	/// Desc Reads an unsigned signed 16 bits integer and returns it as a number
	readUint16 : function () {
		if (this.sizeRemaining() >= 2) {
			if (haveDataView) {
				var data = this.dataview.getUint16(this.index, true);
			} else {
				var data = this.parser.decodeInt(this.sub(this.index, 2), 16, false);
			}
			this.index += 2;
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readUint16Array
	/// Desc Reads size times unsigned 16 bits integers and returns them as an array
	readUint16Array : function (size) {
		if (this.sizeRemaining() >= (size * 2)) {
			var data = [];
			
			for (var i = 0; i < size; i++) {
				if (haveDataView) {
					data[i] = this.dataview.getUint16(this.index + (i * 2), true);
				} else {
					data[i] = this.parser.decodeInt(this.sub(this.index + (i * 2), 2), 16, false);
				}
			}
			
			this.index += size * 2;
			
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readUint32
	/// Desc Reads an unsigned signed 32 bits integer and returns it as a number
	readUint32 : function () {
		if (this.sizeRemaining() >= 4) {
			if (haveDataView) {
				var data = this.dataview.getUint32(this.index, true);
			} else {
				var data = this.parser.decodeInt(this.sub(this.index, 4), 32, false);
			}
			this.index += 4;
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readUint32
	/// Desc Reads an unsigned signed 32 bits integer and returns it as a number
	readUint32Special : function () {
		if (this.sizeRemaining() >= 4) {
			if (haveDataView) {
				var data = this.dataview.getUint32(this.index, true);
			} else {
				var data = this.parser.toByte(this.sub(this.index, 4));
				var data2 = this.parser.toByte(this.sub(this.index + 1, 4));
				console.log(this.sub(this.index, 4) + " === " + data + " === " + data2);
				var data = this.parser.toDWord(this.sub(this.index, 4));
			}
			this.index += 4;
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readUint32Array
	/// Desc Reads size times unsigned 32 bits integers and returns them as an array
	readUint32Array : function (size) {
		if (this.sizeRemaining() >= (size * 4)) {
			var data = [];
			
			for (var i = 0; i < size; i++) {
				if (haveDataView) {
					data[i] = this.dataview.getUint32(this.index + (i * 4), true);
				} else {
					data[i] = this.parser.decodeInt(this.sub(this.index + (i * 4), 4), 32, false);
				}
			}
			
			this.index += size * 4;
			
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readFloat32
	/// Desc Reads a 32 bits floating point number and returns it as a number
	readFloat32 : function () {
		if (this.sizeRemaining() >= 4) {
			if (haveDataView) {
				var data = this.dataview.getFloat32(this.index, true);
			} else {
				var data = this.parser.decodeFloat(this.sub(this.index, 4), 23, 8, false);
			}
			this.index += 4;
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readFloat32Array
	/// Desc Reads size times 32 bits floating point numbers and returns them as an array
	readFloat32Array : function (size) {
		if (this.sizeRemaining() >= (size * 4)) {
			var data = [];
			
			for (var i = 0; i < size; i++) {
				if (haveDataView) {
					data[i] = this.dataview.getFloat32(this.index + (i * 4), true);
				} else {
					var data = this.parser.decodeFloat(this.sub(this.index + (i * 4), 4), 23, 8, false);
				}
			}
			
			this.index += size * 4;
			
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readFloat64
	/// Desc Reads a 64 bits floating point number and returns it as a number
	readFloat64 : function () {
		if (this.sizeRemaining() >= 8) {
			if (haveDataView) {
				var data = this.dataview.getFloat64(this.index, true);
			} else {
				var data = this.parser.decodeFloat(this.sub(this.index, 8), 52, 11, false);
			}
			this.index += 8;
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readFloat64Array
	/// Desc Reads size times 64 bits floating point numbers and returns them as an array
	readFloat64Array : function (size) {
		if (this.sizeRemaining() >= (size * 8)) {
			var data = [];
			
			for (var i = 0; i < size; i++) {
				if (haveDataView) {
					data[i] = this.dataview.getFloat64(this.index + (i * 8), true);
				} else {
					data[i] = this.parser.decodeFloat(this.sub(this.index + (i * 8), 8), 52, 11, false);
				}
			}
			
			this.index += size * 8;
			
			return data;
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readExpected
	/// Desc Reads what.size bytes and compares what to the returned string
	readExpected : function (what) {
		if (this.sizeRemaining() >= what.length) {
			var data = this.read(what.length);
			
			if (data === what) {
				return true;
			} else {
				console.log("Exception: expected " + what + " but found " + data);
				return false;
			}
		} else {
			console.log("Exception: illegal operation (causes buffer overflow)");
			return null;
		}
	},
	
	/// method BinaryStream#readHeader
	/// Desc Reads a MDX header
	readHeader : function () {
		if (this.sizeRemaining() >= 8) {
			return new Header(this);
		} else {
			return null;
		}
	}
};